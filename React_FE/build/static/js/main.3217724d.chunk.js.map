{"version":3,"sources":["utilities.js","DetectionPage.js","ObjectDescription.js","App.js","index.js"],"names":["labelMap","1","name","color","2","3","4","5","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke","DetectionPage","webcamRef","useRef","canvasRef","navigate","useNavigate","useState","setNet","detect","useCallback","net","a","current","video","readyState","videoWidth","videoHeight","img","tf","fromPixels","resized","resizeBilinear","casted","cast","expanded","expandDims","executeAsync","obj","array","objectNumber","score","state","canvas","getContext","requestAnimationFrame","console","error","runCoco","loadedNet","intervalId","setInterval","clearInterval","useEffect","className","ref","muted","ObjectDescription","location","useLocation","src","alt","type","value","readOnly","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3217724d.chunk.js","sourcesContent":["// Define labelmap\r\nconst labelMap = {\r\n  1: { name: \"1\", color: \"red\" },\r\n  2: { name: \"2\", color: \"yellow\" },\r\n  3: { name: \"3\", color: \"lime\" },\r\n  4: { name: \"4\", color: \"blue\" },\r\n  5: { name: \"5\", color: \"black\" },\r\n};\r\n\r\n// Define a drawing function\r\nexport const drawRect = (\r\n  boxes,\r\n  classes,\r\n  scores,\r\n  threshold,\r\n  imgWidth,\r\n  imgHeight,\r\n  ctx\r\n) => {\r\n  for (let i = 0; i <= boxes.length; i++) {\r\n    if (boxes[i] && classes[i] && scores[i] > threshold) {\r\n      // Extract variables\r\n      const [y, x, height, width] = boxes[i];\r\n      const text = classes[i];\r\n\r\n      // Set styling\r\n      ctx.strokeStyle = labelMap[text][\"color\"];\r\n      ctx.lineWidth = 10;\r\n      ctx.fillStyle = \"white\";\r\n      ctx.font = \"30px Arial\";\r\n\r\n      // DRAW\r\n      ctx.beginPath();\r\n      ctx.fillText(\r\n        labelMap[text][\"name\"] + \" - \" + Math.round(scores[i] * 100) / 100,\r\n        x * imgWidth,\r\n        y * imgHeight - 10\r\n      );\r\n      ctx.rect(\r\n        x * imgWidth,\r\n        y * imgHeight,\r\n        (width * imgWidth) / 2,\r\n        (height * imgHeight) / 2\r\n      );\r\n      ctx.stroke();\r\n    }\r\n  }\r\n};\r\n","import React, { useRef, useEffect, useState, useCallback } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport Webcam from \"react-webcam\";\r\nimport { drawRect } from \"./utilities\";\r\n\r\nimport \"./DetectionPage.css\";\r\n\r\nfunction DetectionPage() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const navigate = useNavigate();\r\n\r\n  const [, setNet] = useState(null);\r\n\r\n  const detect = useCallback(\r\n    async (net) => {\r\n      // Check data is available\r\n      if (\r\n        typeof webcamRef.current !== \"undefined\" &&\r\n        webcamRef.current !== null &&\r\n        webcamRef.current.video.readyState === 4\r\n      ) {\r\n        // Get Video Properties\r\n        const video = webcamRef.current.video;\r\n        const videoWidth = webcamRef.current.video.videoWidth;\r\n        const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n        // Set video width\r\n        webcamRef.current.video.width = videoWidth;\r\n        webcamRef.current.video.height = videoHeight;\r\n\r\n        // Set canvas height and width\r\n        canvasRef.current.width = videoWidth;\r\n        canvasRef.current.height = videoHeight;\r\n\r\n        // Make Detections\r\n        const img = tf.browser.fromPixels(video);\r\n        const resized = tf.image.resizeBilinear(img, [640, 480]);\r\n        const casted = resized.cast(\"int32\");\r\n        const expanded = casted.expandDims(0);\r\n        const obj = await net.executeAsync(expanded);\r\n\r\n        const boxes = await obj[6].array();\r\n        const classes = await obj[1].array();\r\n        const scores = await obj[3].array();\r\n\r\n        // Main label detected\r\n        const confidence = 0.9;\r\n        if (scores[0][0] > confidence) {\r\n          const objectNumber = classes[0][0];\r\n          const score = scores[0][0];\r\n\r\n          navigate(\"/ObjectDescription\", { state: { objectNumber, score } });\r\n        }\r\n\r\n        const canvas = canvasRef.current;\r\n\r\n        if (canvas) {\r\n          // Draw mesh\r\n          const ctx = canvas.getContext(\"2d\");\r\n\r\n          if (ctx) {\r\n            requestAnimationFrame(() => {\r\n              drawRect(\r\n                boxes[0],\r\n                classes[0],\r\n                scores[0],\r\n                0.7, //confidence\r\n                videoWidth,\r\n                videoHeight,\r\n                ctx\r\n              );\r\n            });\r\n          } else {\r\n            console.error(\"Canvas context not available\");\r\n          }\r\n        } else {\r\n          console.error(\"Canvas element not available\");\r\n        }\r\n\r\n        tf.dispose(img);\r\n        tf.dispose(resized);\r\n        tf.dispose(casted);\r\n        tf.dispose(expanded);\r\n        tf.dispose(obj);\r\n      }\r\n    },\r\n    [navigate]\r\n  );\r\n\r\n  const runCoco = useCallback(async () => {\r\n    // Load network\r\n    const loadedNet = await tf.loadGraphModel(\r\n      \"https://musuemtfod.s3.us-south.cloud-object-storage.appdomain.cloud/model.json\"\r\n    );\r\n    setNet(loadedNet);\r\n\r\n    // Loop and detect hands\r\n    const intervalId = setInterval(() => {\r\n      detect(loadedNet);\r\n    }, 16.7);\r\n\r\n    // Clean up interval on component unmount\r\n    return () => clearInterval(intervalId);\r\n  }, [detect]);\r\n\r\n  useEffect(() => {\r\n    runCoco();\r\n  }, [runCoco]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Museum</h1>\r\n        <div className=\"Webcam-container\">\r\n          <Webcam ref={webcamRef} muted={true} className=\"Webcam\" />\r\n          <canvas ref={canvasRef} className=\"Canvas\" />\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DetectionPage;\r\n","import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport \"./ObjectDescription.css\"; // Import the CSS file\r\n\r\nfunction ObjectDescription() {\r\n  const location = useLocation();\r\n  const objectNumber = location.state?.objectNumber || \"No object number\";\r\n  const score = location.state?.score || \"No score\";\r\n\r\n  return (\r\n    <div className=\"object-description-container\">\r\n      <h1>Object Description</h1>\r\n      <div className=\"object-details\">\r\n        <div className=\"image-container\">\r\n          <img src=\"https://placekitten.com/400/300\" alt=\"Object\" />\r\n        </div>\r\n        <div className=\"text-container\">\r\n          <label>Object Number:</label>\r\n          <input type=\"text\" value={objectNumber} readOnly />\r\n          <label>Score:</label>\r\n          <input type=\"text\" value={score} readOnly />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ObjectDescription;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\n\r\nimport DetectionPage from \"./DetectionPage\";\r\nimport ObjectDescription from \"./ObjectDescription\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<DetectionPage />} />\r\n        <Route path=\"/ObjectDescription\" element={<ObjectDescription />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}